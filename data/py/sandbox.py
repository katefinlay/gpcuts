#%% Importsimport osimport jsonimport numpy as npimport pandas as pdfrom datetime import datetime#%% General Practice / Individual level datasets# Note - you'll have to download these folders and store under ./data/csv/practice = pd.read_csv('./data/csv/GPWPracticeCSV.092022/37. General Practice – September 2022 Practice Level.csv')indiv = pd.read_csv('./data/csv/GPWIndividualCSV.092022/37. General Practice – September 2022 Individual Level.csv', nrows=100)defs_practice = pd.read_excel(f'./data/csv/GPWPracticeCSV.092022/General Practice Practice-Level CSV. Overall Definitions.xlsx')defs_indiv = pd.read_excel(f'./data/csv/GPWIndividualCSV.092022/General Practice Individual-Level CSV. Overall Definitions.xlsx')#%% Practice locationslocation_columns = [    'Organisation Code',    'Name',    'National Grouping',    'High Level Health Geography',    'Address Line 1',    'Address Line 2',    'Address Line 3',    'Address Line 4',    'Address Line 5',    'Postcode',    'Open Date',    'Close Date',    'Status Code',    'Organisation Sub-Type Code',    'Commissioner',    'Join Provider/Purchaser Date',    'Left Provider/Purchaser Date',    'Contact Telephone Number',    'Amended Record Indicator',    'Provider/Purchaser',    'Prescribing Setting']usecols = list(range(0, 18)) + [21, 23, 25]practice_locations = pd.read_csv('./data/gplocations/epraccur.csv', usecols = usecols, names=location_columns)practice_locations['postcode_merge_col'] = practice_locations['Postcode'].str.lower().str.replace(' ','').str.strip()#%%postcodes = pd.read_csv('./data/csv/postcodes/postcodes.csv')postcodes['postcode_merge_col'] = postcodes['Postcode'].str.lower().str.replace(' ','').str.strip()#%%# Assign latitude & longitude, and Parliamentary Constituency to practice locationsconstituencies = pd.read_csv('./data/csv/parliamentary_constituencies/UK Constituency Postcodes.csv')#%%merged = practice_locations.merge(postcodes[['postcode_merge_col','Latitude','Longitude','Constituency Code']], how='left', on='postcode_merge_col')merged = merged.merge(constituencies[['Code', 'MP', 'Party', 'Constituency']], right_on='Code', left_on='Constituency Code', how='left')for col in ['Address Line 1', 'Address Line 2', 'Address Line 3', 'Address Line 4', 'Address Line 5']:    merged[col] = merged[col].fillna('')#%%x = practice_locations[~practice_locations['Organisation Code'].isin(practice['PRAC_CODE'].values)]x.to_csv('./data/csv/practice_locations_not_found_in_snapshot.csv', index=False)#%%def parse_date(date):    try:        datetime.strptime(int(date), '%Y%m%d').strftime('%Y-%m-%d')    except:        return Nonegeojson = {"type": "FeatureCollection", "features": []}for _, row in merged.iloc[:10].iterrows():    feature = {        "type": "Feature",         "geometry": {            "type": "Point",             "coordinates": [                row['Longitude'],                 row['Latitude']]            },         "properties": {            "organisation_code": row["Organisation Code"],            "name": row['Name'],            "address_line_1": row["Address Line 1"],            "address_line_2": row["Address Line 2"],            "address_line_3": row["Address Line 3"],            "address_line_4": row["Address Line 4"],            "address_line_5": row["Address Line 5"],            "postcode": row["Postcode"],            "open_date": parse_date(row["Open Date"]),            "close_date": parse_date(row["Close Date"]),            "status_code": row["Status Code"],            "constituency_code": row["Constituency Code"],            "Consituitency": row["Constituency"],            "MP": row["MP"],            "Party": row["Party"],                        }        }    geojson['features'].append(feature)with open('./data/json/practices_.geojson', 'w') as fp:    json.dump(geojson, fp)